public class Solution {
    /**
     * @param nums: A list of integers
     * @return: An integer denotes the middle number of the array
     */
    public int median(int[] A) {
        halveIt(A, 0, A.length-1);
        if(A.length % 2 == 1){
            return A[A.length/2];
        }
        return A[A.length/2-1];
    }
    
    public void halveIt(int[] arr, int start, int end){
        if(end <= start){
            return;
        }
        int mid = (start+end)/2;
        halveIt(arr, start, mid);
        halveIt(arr, mid + 1, end);
        mergeSortedArray(arr, start, end, mid);
    }
    
    public void mergeSortedArray(int[] ar, int left, int right, int mid) {
        int[] temp = new int[right - left + 1]; //as small as possible to save space
        int a = left; int b = mid + 1;  int i = 0;
        while(a<=mid && b<=right){
            if(ar[a] <= ar[b]){
                temp[i++] = ar[a++];
            }
            else{
                temp[i++] = ar[b++];
            }
        }
        while(a <= mid){
            temp[i++] = ar[a++];
        }
        while(b <= right){
            temp[i++] = ar[b++];
        }
        for(int j = 0; j< temp.length; j++){
            ar[left++] = temp[j];
        }
    }
}


//faster way with quickSelect. Saves time by leaving some parts of the array unsorted
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: An integer denotes the middle number of the array
     */
    public int left;
    public int target;
    
    public int median(int[] arr) {
        if(arr.length % 2 == 1){
            target = arr.length/2;
        }
        else{
            target = arr.length/2 - 1;
        }
        quickSelect(arr, 0, arr.length-1);
        return arr[left];
    }
    
    public void quickSelect(int[] arr, int start, int end){
        int pivotIn = (int)(Math.random() * (end - start + 1)) + start;
        left = start;
        int pivot = arr[pivotIn];
        swap(arr, pivotIn, end);
        for(int i = start; i <= end; i++){
            if(arr[i] <= pivot){
                swap(arr, left++, i);
            }
        }
        left--;
        if(target == left){
            return;
        }
        else if(target < left){
            quickSelect(arr, start, left-1);
        }
        else{
            quickSelect(arr, left + 1, end);
        }
    }
    
    private void swap(int[] arr, int a, int b){
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}

